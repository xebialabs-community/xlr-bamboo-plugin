plugins {
  id "com.github.hierynomus.license" version "0.14.0"
  id 'nebula.release' version '6.0.0'
  id "com.github.hierynomus.jython" version "0.8.0"
}

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'

if (!project.hasProperty('release.scope')) {
  project.ext['release.scope'] = 'patch'
}

if (!project.hasProperty('release.useLastTag')) {
  project.ext['release.useLastTag'] = true
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url 'https://dist.xebialabs.com/public/maven2'
  } 
}


dependencies {
    // Place rest-assured before JUnit dependency to make sure correct Hamcrest is used
    testCompile 'io.rest-assured:rest-assured:3.2.0'
    testCompile "junit:junit:4.11"
    testCompile "com.googlecode.json-simple:json-simple:1.1.1"
    testCompile "org.assertj:assertj-core:3.6.2"
    testCompile "org.testcontainers:testcontainers:1.12.0"
    testCompile "org.skyscreamer:jsonassert:1.5.0"

    jython python(":httplib2:0.11.3") {
      copy {
        from "python2/httplib2"
      }
    }
}

test {
    // Auto detected Unit tests only, exclude the end to end integration test
    exclude '**/*IntegrationTest.class'
    
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
}
 

task integrationTest(type: Test, dependsOn: ['build']) {
    // do not automatically scan for tests
    scanForTestClasses = false 
    // explicitly include the integration test
    include '**/*IntegrationTest.class'
    // To run tests - 
    // 1. Docker  and Docker Compose must be installed 
    // 2. To run the test - ./gradlew clean integrationTest
    //   The test will set up a temporary xlr/mockserver testbed using docker. The mockserver
    //   will serve up Bamboo Rest Api Responses
    // After testing is complete, the test docker containers are stopped and removed. 

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
}


license {
  header rootProject.file('License.md')
  strictCheck false
  excludes(["**/*.json", "**/httplib2/**/*.*"])
  ext.year = Calendar.getInstance().get(Calendar.YEAR)
  ext.name = 'XEBIALABS'
}
